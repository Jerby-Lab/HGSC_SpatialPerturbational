}
`%!in%` <- Negate(`%in%`)
transfer_data_list_to_so <- function(r,
so,
transfer_list = c("coor",
"samples",
"TMAs",
"patients",
"samples",
"sites",
"treatment",
"cell.types",
"cell.types2"))
{
for (field in transfer_list) {
if (is.null(dim(r[[field]]))) {
so@meta.data[[field]] <- r[[field]]
}
else {
so@meta.data <- cbind(so@meta.data, r[[field]])
}
}
return(so)
}
seuratify <- function(counts, prj_name = "") {
so <- Seurat::CreateSeuratObject(counts, project = prj_name)
so@meta.data$cellid <- row.names(so@meta.data)
return(so)
}
cap_object <- function (X, q) {
ceil_q <- 1 - q
ceil <- quantile(X, ceil_q)
floor <- quantile(X, q)
X[X > ceil] <- ceil
X[X < floor] <- floor
return(X)
}
rgb2hex <- function (x) {
hex = rgb(x[1], x[2], x[3], maxColorValue = 255)
return(hex)
}
get.OE <- function (r, sig){
scores <- get.OE1(r, sig)
names(sig) <- gsub(" ", ".", names(sig))
two.sided <- unique(gsub(".up", "", gsub(".down", "", names(sig))))
b <- is.element(paste0(two.sided, ".up"), names(sig)) & is.element(paste0(two.sided,
".down"), names(sig))
if (any(b)) {
two.sided <- two.sided[b]
scores2 <- as.matrix(scores[, paste0(two.sided, ".up")] -
scores[, paste0(two.sided, ".down")])
colnames(scores2) <- two.sided
scores <- cbind(scores2, scores)
}
if (!is.null(r$cells)) {
rownames(scores) <- r$cells
}
else {
if (!is.null(r$samples)) {
rownames(scores) <- r$samples
}
}
return(scores)
}
get.OE1 <- function (r, sig){
if (is.list(sig)) {
scores <- t(plyr::laply(sig, function(g) get.OE1(r, g)))
rownames(scores) <- r$cells
colnames(scores) <- names(sig)
return(scores)
}
g <- sig
b <- is.element(r$genes, g)
assertthat::is.string(rownames(r$binZ)[1])
n1 <- plyr::laply(rownames(r$binZ), function(x) sum(b[r$genes.dist.q ==
x]))
rand.scores <- t(r$binZ) %*% n1
if (sum(b) == 1) {
raw.scores <- r$zscores[b, ]
}
else {
raw.scores <- colSums(r$zscores[b, ])
}
scores <- (raw.scores - rand.scores)/sum(b)
return(scores)
}
scale_and_center <- function (X, MARGIN){
X_norm = t(apply(X, MARGIN, function(x) {
loc = mean(x, na.rm = T)
center = x - loc
scale = center/sd(x)
return(scale)
}))
return(X_norm)
}
subset_list <- function (r, subcells) {
n_cells <- length(r$cells)
n_genes <- length(r$genes)
q <- lapply(r, function(x) {
if (is.null(dim(x))) {
if (length(x) == n_cells) {
return(x[r$cells %in% subcells])
}
else {
return(x)
}
}
else if (dim(x)[2] == n_cells) {
return(x[, r$cells %in% subcells])
}
else if (dim(x)[1] == n_cells) {
return(x[r$cells %in% subcells, ])
}
else {
return(x)
}
})
return(q)
}
spearman.cor <- function (v1, v2 = NULL,
method = "spearman",
use = "pairwise.complete.obs",
match.flag = F,
alternative = "two.sided",
upper.tri.flag = F)
{
if (is.null(v2)) {
v2 <- v1
}
if (!is.matrix(v1)) {
v1 <- as.matrix(v1)
}
if (!is.matrix(v2)) {
v2 <- as.matrix(v2)
}
if (match.flag) {
n = ncol(v1)
if (is.null(colnames(v1))) {
colnames(v1) <- 1:ncol(v1)
}
results <- get.mat(m.cols = c("R", "P"), m.rows = colnames(v1))
for (i in 1:ncol(v1)) {
c.i <- cor.test(v1[, i], v2[, i], method = method,
use = use, alternative = alternative)
results[i, 1] <- c.i$estimate
results[i, 2] <- c.i$p.value
}
}
else {
n1 = ncol(v1)
m <- matrix(nrow = n1, ncol = ncol(v2))
rownames(m) <- colnames(v1)
colnames(m) <- colnames(v2)
results <- list(cor = m, p = m)
for (i in 1:n1) {
f <- function(x) {
c.i <- cor.test(v1[, i], x, method = method,
use = use, alternative = alternative)
c(c.i$estimate, c.i$p.value)
}
c.i <- apply(v2, 2, f)
results$cor[i, ] <- c.i[1, ]
results$p[i, ] <- c.i[2, ]
}
if (ncol(v2) == 1) {
results <- cbind(results$cor, results$p)
colnames(results) <- c("R", "P")
}
}
if (upper.tri.flag) {
results$up <- cbind(results$cor[upper.tri(results$cor)],
results$p[upper.tri(results$p)])
}
return(results)
}
get.top.cor <- function (m, q = 100, min.ci = 0, idx = NULL, add.prefix = "") {
m <- as.matrix(m)
if (is.null(colnames(m))) {
colnames(m) <- 1:ncol(m)
}
m.pos <- (-m)
m.neg <- m
colnames(m.pos) <- paste0(colnames(m.pos), ".up")
colnames(m.neg) <- paste0(colnames(m.neg), ".down")
v <- get.top.elements(cbind(m.pos, m.neg), q, min.ci = (-abs(min.ci)))
names(v) <- c(colnames(m.pos), colnames(m.neg))
if (!is.null(idx)) {
v <- v[paste(idx, c("up", "down"), sep = ".")]
}
names(v) <- paste0(add.prefix, names(v))
return(v)
}
get.top.elements <- function (m, q = 100, min.ci = NULL, main = "") {
top.l <- list()
v <- rownames(m)
for (i in 1:ncol(m)) {
mi <- m[, i]
mi <- mi[!is.na(mi)]
idx <- order(mi, decreasing = F)
ci <- mi[idx[min(q, length(mi))]]
ci <- min(ci, min.ci)
b <- m[, i] <= ci
b[is.na(m[, i])] <- F
top.l[[i]] <- sort(v[b])
}
if (main != "") {
main <- paste0(main, ".")
}
names(top.l) <- paste0(main, colnames(m))
return(top.l)
}
spatial_sample_visualization <- function (seg_path,
celltypes,
cell2rgb,
samplename,
background = "black",
outpath = "~/",
outfile = "out.jpg",
cont_field = "",
low_qc_color = 0,
contvals = NULL)
{
cellseg = read.csv(seg_path)
colnames(cellseg) <- unlist(lapply(colnames(cellseg), function(x) {
strsplit(x, split = "X0.")[[1]][2]
}))
colnames(cellseg)[1] <- "0"
cellmask <- cellseg
cellmask[cellmask != 0] <- low_qc_color
if (background == "white") {
cellmask[cellmask == 0] <- 1
}
else {
cellmask[cellmask == 0] <- 0
}
cellmask <- EBImage::Image(as.matrix(cellmask))
cellmask <- EBImage::channel(cellmask, "rgb")
levels <- setdiff(unique(celltypes), cont_field)
for (type in levels) {
# print(type)
cellids = names(celltypes[celltypes == type])
# print(length(cellids))
cellidx = unlist(lapply(cellids, function(x) as.integer(strsplit(x,
split = "c")[[1]][2])))
celltype_mask <- t(apply(cellseg, 1, function(x) {
x %in% cellidx
}))
celltype_rgb_1 <- cellmask@.Data[, , 1]
celltype_rgb_1[celltype_mask] <- as.numeric(cell2rgb[[type]][1])/255
cellmask[, , 1] <- celltype_rgb_1
celltype_rgb_2 <- cellmask@.Data[, , 2]
celltype_rgb_2[celltype_mask] <- as.numeric(cell2rgb[[type]][2])/255
cellmask[, , 2] <- celltype_rgb_2
celltype_rgb_3 <- cellmask@.Data[, , 3]
celltype_rgb_3[celltype_mask] <- as.numeric(cell2rgb[[type]][3])/255
cellmask[, , 3] <- celltype_rgb_3
}
if (cont_field != "") {
cellids = names(celltypes[celltypes == cont_field])
print(cont_field)
print(length(cellids))
cellidx = unlist(lapply(cellids, function(x) as.integer(strsplit(x,
split = "c")[[1]][2])))
celltype_mask <- t(apply(cellseg, 1, function(x) {
x %in% cellidx
}))
cellids <- paste0(samplename, "_c", cellseg[celltype_mask])
colormap <- t(sapply(unique(contvals), simplify = T,
grDevices::col2rgb))/255
celltype_rgb_1 <- cellmask@.Data[, , 1]
celltype_rgb_1[celltype_mask] <- colormap[contvals[cellids],
1]
cellmask[, , 1] <- celltype_rgb_1
celltype_rgb_2 <- cellmask@.Data[, , 2]
celltype_rgb_2[celltype_mask] <- colormap[contvals[cellids],
2]
cellmask[, , 2] <- celltype_rgb_2
celltype_rgb_3 <- cellmask@.Data[, , 3]
celltype_rgb_3[celltype_mask] <- colormap[contvals[cellids],
3]
cellmask[, , 3] <- celltype_rgb_3
}
EBImage::writeImage(cellmask, files = outfile)
}
intersect.lists <- function(sig1, sig2){
out <- lapply(1:length(sig1), function(x){
intersect(sig1[[x]], sig2[[x]])
})
names(out) <- names(sig1)
return(out)
}
scRNA_denovo.cell.type.markers<-function(r,n.non.mal,q.dr = 0.2){
get.FC1<-function(x1,x2){
Z<-log2(gene.av[sig[[x1]],x1]/gene.av[sig[[x1]],x2])
return(Z)
}
get.ttest1<-function(x1,x2){
b1<-is.element(r$cell.types,x1)
b2<-is.element(r$cell.types,x2)
b<-b1|b2
Z<-t.test.mat(r$tpm[sig[[x1]],b],b1[b])
return(Z)
}
get.ttest<-function(x1){
if(length(sig[[x1]])<1){
return(NA)
}
Z<-t(laply(cell.types,function(x2){
get.ttest1(x1,x2)[,3]
}))
colnames(Z)<-cell.types
b.mal<-startsWith(cell.types,"Malignant")
Z<-cbind.data.frame(n = rowSums(Z>10,na.rm = T),
n.mal = rowSums(Z[,b.mal]>10,na.rm = T),
n.non.mal = rowSums(Z[,!b.mal]>10,na.rm = T),
n.non.T = rowSums(Z[,!b.tcell]>10,na.rm = T),Z)
return(Z)
}
get.FC<-function(x1){
Z<-t(laply(cell.types,function(x2) get.FC1(x1,x2)))
colnames(Z)<-cell.types
b.mal<-startsWith(cell.types,"Malignant")
Z<-cbind.data.frame(n = rowSums(Z>0.2,na.rm = T),
n.mal = rowSums(Z[,b.mal]>0.2,na.rm = T),
n.non.mal = rowSums(Z[,!b.mal]>0.2,na.rm = T),
n.non.T = rowSums(Z[,!b.tcell]>0.2,na.rm = T),Z)
return(Z)
}
r$b.mal<-r$cell.types=="Malignant"
b<-!r$b.mal|is.element(r$samples,get.abundant(r$samples[r$b.mal],abn.c = 50))
b<-b&get.abundant(r$cell.types,abn.c = 50,boolean.flag = T)
# print(paste("Removing",sum(!b),"cells."))
r<-set.list(r,b)
r$cell.types[r$b.mal]<-paste(r$cell.types[r$b.mal],r$patients[r$b.mal],sep = "_")
cell.types<-unique(r$cell.types)
gene.av <- t(laply(cell.types,function(x) return(rowMeans(r$tpm[,r$cell.types==x]))))
gene.dr <- t(laply(cell.types,function(x) return(rowMeans(r$tpm[,r$cell.types==x]>0))))
colnames(gene.av)<-cell.types
colnames(gene.dr)<-cell.types
genes<-r$genes
sigDR<-apply(gene.dr,2,function(x) genes[x>q.dr])
n.mal<-min(length(unique(r$patients[r$b.mal])),40)
sigDR$Malignant<-get.abundant(unlist(sigDR[grepl("Malignant",names(sigDR))]),n.mal)
# print(summary(sigDR))
sig<-sigDR
b.mal<-grepl("Malignant",cell.types)
b.tcell<-is.element(cell.types,c("T.cell","CD4.T","CD8.T"))
if(missing(n.non.mal)){n.non.mal<-(sum(!b.mal)-1)}
n.non.T<-sum(!b.tcell)-1
Z1<-lapply(cell.types,get.FC)
names(Z1)<-cell.types;summary(Z1)
# Identify genes which are up-regulated in a non-malignant cell type compared
# to all other (or at least n.non.mal) non-malignant cells types, and compared to malignant cells in at least n.mal patients
sig<-lapply(Z1, function(X) sort(rownames(X)[X$n.mal>=n.mal&X$n.non.mal>=n.non.mal]));summary(sig)
sig[b.tcell]<-lapply(Z1[b.tcell], function(X) sort(rownames(X)[X$n.non.T>=n.non.T&X$n.mal>=n.mal]))
sig[b.mal]<-lapply(Z1[b.mal], function(X) sort(rownames(X)[X$n.non.mal>=n.non.mal]))
sig$Malignant<-get.abundant(unlist(sig[b.mal]),n.mal)
# print(summary(sig[c("Malignant",cell.types[!b.mal])]))
sigFC<-sig
Z2<-lapply(cell.types,get.ttest)
names(Z2)<-cell.types
sig<-lapply(Z2, function(X){
if(identical(X,NA)){return(NA)}
return(sort(rownames(X)[X$n.mal>=n.mal&X$n.non.mal>=n.non.mal]))});summary(sig)
sig[b.tcell]<-lapply(Z2[b.tcell], function(X) sort(rownames(X)[X$n.non.T>=n.non.T&X$n.mal>=n.mal]))
sig[b.mal]<-lapply(Z2[b.mal], function(X) sort(rownames(X)[X$n.non.mal>=n.non.mal]))
sig$Malignant<-sort(get.abundant(v = unlist(sig[b.mal]),
abn.c = min(sum(b.mal),40),boolean.flag = F))
# print(summary(sig[c("Malignant",cell.types[!b.mal])]))
sig.strict<-intersect.lists(sigFC,sigDR)
sig.strict<-intersect.lists(sig,sig.strict)
sig.strict<-sig.strict[laply(sig.strict,length)>0]
rslts<-list(cohort = r$cohortName,
gene.dr = gene.dr,
gene.av = gene.av,
FC = Z1,ttest = Z2,
sigDR = sigDR,
sigFC = sigFC,
sig.strict = sig.strict,
sig.mal = sig[grepl("Malignant_",names(sig))],
sig = sig[!grepl("Malignant_",names(sig))])
if(sum(is.element(cell.types,c("Myeloid","DC")))==2){
rslts<-scRNA_denovo.cell.type.markers.similar.cell.types(rslts,"Myeloid","DC")
}
max.nonmal<-rowMax(rslts$gene.dr[,!grepl("Malignant",colnames(rslts$gene.dr))])
rslts$sig$Malignant.strict<-rslts$sig$Malignant[max.nonmal[rslts$sig$Malignant]<0.2]
# print(summary(rslts$sig))
return(rslts)
}
set.list<-function (r,b,name){
set.field<-function (v,b){
d <- dim(v)
d.b<-length(b)
if(!is.null(d)){
if(d[1]==d.b){v <- subset(v,subset = b)}
if(d[2]==d.b){v <- v[,b]}
}else{if(length(v)==d.b){v <- v[b]}}
return(v)
}
rn<-lapply(r, set.field, b = b)
if(!missing(name)){rn$name<-name}
return(rn)
}
rowMax <- function (X) {
y <- apply(X, 1, function(x) max(x, na.rm = T))
return(y)
}
rowMin <- function (m) {
return(-rowMax(-m))
}
prep4OE <- function (r, n.cat = 50) {
r$zscores <- center.matrix(r$tpm, dim = 1, sd.flag = T)
X <- 10 * ((2^r$tpm) - 1)
r$genes.dist <- log2(rowMeans(X, na.rm = T) + 1)
r$genes.dist.q <- discretize.prvt(r$genes.dist, n.cat = n.cat)
b <- rowSums(is.na(r$zscores)) == 0
if (any(!b)) {
r <- set.list(r, b)
}
r$binZ <- average.mat.rows(r$zscores, r$genes.dist.q, f = colMeans)
return(r)
}
discretize.prvt <- function (v, n.cat, q1) {
q1 <- quantile(v, seq(from = (1/n.cat), to = 1, by = (1/n.cat)),
na.rm = T)
u <- matrix(data = 1, nrow = length(v))
for (i in 2:n.cat) {
u[(v >= q1[i - 1]) & (v <= q1[i])] <- i
}
u <- paste0("Q", u)
return(u)
}
center.matrix <- function (m, dim = 1, sd.flag = F) {
if (dim == 1) {
zscores <- sweep(m, 1, rowMeans(m, na.rm = T), FUN = "-")
}
else {
zscores <- sweep(m, 2, colMeans(m, na.rm = T), FUN = "-")
}
if (sd.flag) {
zscores <- sweep(zscores, dim, apply(m, dim, function(x) (sd(x,
na.rm = T))), FUN = "/")
}
return(zscores)
}
average.mat.rows <- function (m, ids, f = colMeans)
{
ids.u <- sort(unique(ids))
m1 <- get.mat(ids.u, colnames(m))
for (x in ids.u) {
b <- is.element(ids, x)
if (sum(b) == 1) {
m1[x, ] <- m[b, ]
}
else {
m1[x, ] <- f(m[b, ])
}
}
return(m1)
}
cast_sites <- function(df, column_idx){
out <- Reduce(function(x, y) merge(x, y, by = c("patients", "treatment")),
lapply(column_idx, function(x){
col = colnames(df)[x]
out <- df[,c(1:3, x)] %>%
spread(sites_binary, .data[[col]])
colnames(out)[3:4] <- paste0(col, "_", colnames(out)[3:4])
return(out)
}))
return(out)
}
libs4HGSC<-c("beanplot","cowplot","Seurat","EBImage","survival","rms","mixtools","MASS","ggplot2",
"nnet","ppcor","ROCR","tsne","gplots","ggpubr","EnhancedVolcano","plyr","reshape2",
"plotrix","stats", "Matrix","Rtsne","lmerTest","devtools","gplots","heatmap3","e1071",
"openxlsx","RColorBrewer","heatmap3","UpSetR", "dplyr", "survminer", "pheatmap",
"stringr", "pROC", "argparse","tidyr", "usethis", "ggrepel", "Hmisc",
"SeuratObject", "parallel")
v<-lapply(libs4HGSC,function(x) library(x,character.only = T))
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
get.file<-function(file1){
dir1 <- "/path/to/your/local/clone/of/this/repo/"
return(paste0(dir1,file1))
}
dir1 <- "~/Projects/HGSC_SpatialPerturbational/"
get.file<-function(file1){
dir1 <- "~/Projects/HGSC_SpatialPerturbational/"
return(paste0(dir1,file1))
}
r<-readRDS(get.file("Data/SMI_data.rds"))
dir1 <- "~/Projects/HGSC_SpatialPerturbational_tmp/"
get.file<-function(file1){
dir1 <- "~/Projects/HGSC_SpatialPerturbational_tmp/"
return(paste0(dir1,file1))
}
r<-readRDS(get.file("Data/SMI_data.rds"))
r1<-readRDS(get.file("Data/SMI_data_malignant.rds"))
r1<-mTIL_Fig3_prepData(r1)
rslts<-readRDS(get.file("Results/HGSC_mTIL_Malignant2env_TNK.cell.rds"))
s <- readRDS(get.file("Data/MERFISH_data.rds"))
r1
P<-list(samples = r1$scoresSamples[,"hot100"],
patches = r1$scoresAv[,"hot100"],
cells = r1$scores[,"hot100"])
P$samples
Y<-list(samples = r1$tmeSamples[,"TNK.cell"]>quantile(r1$tmeSamples[,"TNK.cell"],q1),
patches = r1$tmeAv[,"TNK.cell"]>quantile(r1$tmeAv[,"TNK.cell"],q1),
cells = r1$tme[,"TNK.cell"]>quantile(r1$tme[,"TNK.cell"],q1))
q1 = 0.75
Y<-list(samples = r1$tmeSamples[,"TNK.cell"]>quantile(r1$tmeSamples[,"TNK.cell"],q1),
patches = r1$tmeAv[,"TNK.cell"]>quantile(r1$tmeAv[,"TNK.cell"],q1),
cells = r1$tme[,"TNK.cell"]>quantile(r1$tme[,"TNK.cell"],q1))
Y
